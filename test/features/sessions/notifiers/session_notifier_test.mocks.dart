// Mocks generated by Mockito 5.4.5 from annotations
// in liftly/test/features/sessions/notifiers/session_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i19;
import 'package:liftly/common/enums/progression_type_enum.dart' as _i16;
import 'package:liftly/common/enums/week_day_enum.dart' as _i14;
import 'package:liftly/features/exercise/models/exercise.dart' as _i4;
import 'package:liftly/features/exercise/notifiers/exercise_notifier.dart'
    as _i11;
import 'package:liftly/features/home/models/routine.dart' as _i13;
import 'package:liftly/features/home/notifiers/routine_notifier.dart' as _i12;
import 'package:liftly/features/progression/models/progression_calculation_result.dart'
    as _i7;
import 'package:liftly/features/progression/models/progression_config.dart'
    as _i8;
import 'package:liftly/features/progression/models/progression_state.dart'
    as _i5;
import 'package:liftly/features/progression/models/progression_template.dart'
    as _i17;
import 'package:liftly/features/progression/notifiers/progression_notifier.dart'
    as _i15;
import 'package:liftly/features/progression/services/progression_service.dart'
    as _i6;
import 'package:liftly/features/sessions/models/workout_session.dart' as _i10;
import 'package:liftly/features/sessions/notifiers/performed_sets_notifier.dart'
    as _i18;
import 'package:liftly/features/sessions/services/session_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:riverpod_annotation/riverpod_annotation.dart' as _i2;
import 'package:state_notifier/state_notifier.dart' as _i20;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAutoDisposeNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.AutoDisposeNotifierProviderRef<T> {
  _FakeAutoDisposeNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSessionService_1 extends _i1.SmartFake
    implements _i3.SessionService {
  _FakeSessionService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_2 extends _i1.SmartFake implements Duration {
  _FakeDuration_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAutoDisposeAsyncNotifierProviderRef_3<T> extends _i1.SmartFake
    implements _i2.AutoDisposeAsyncNotifierProviderRef<T> {
  _FakeAutoDisposeAsyncNotifierProviderRef_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAsyncValue_4<T> extends _i1.SmartFake implements _i2.AsyncValue<T> {
  _FakeAsyncValue_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExercise_5 extends _i1.SmartFake implements _i4.Exercise {
  _FakeExercise_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProgressionState_6 extends _i1.SmartFake
    implements _i5.ProgressionState {
  _FakeProgressionState_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProgressionService_7 extends _i1.SmartFake
    implements _i6.ProgressionService {
  _FakeProgressionService_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProgressionCalculationResult_8 extends _i1.SmartFake
    implements _i7.ProgressionCalculationResult {
  _FakeProgressionCalculationResult_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProgressionConfig_9 extends _i1.SmartFake
    implements _i8.ProgressionConfig {
  _FakeProgressionConfig_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SessionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionService extends _i1.Mock implements _i3.SessionService {
  MockSessionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AutoDisposeNotifierProviderRef<_i3.SessionService> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeAutoDisposeNotifierProviderRef_0<_i3.SessionService>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.AutoDisposeNotifierProviderRef<_i3.SessionService>);

  @override
  _i3.SessionService get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSessionService_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.SessionService);

  @override
  set state(_i3.SessionService? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.SessionService build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _FakeSessionService_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
      ) as _i3.SessionService);

  @override
  _i9.Future<void> saveSession(_i10.WorkoutSession? session) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSession,
          [session],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i10.WorkoutSession?> getSessionById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSessionById,
          [id],
        ),
        returnValue: _i9.Future<_i10.WorkoutSession?>.value(),
      ) as _i9.Future<_i10.WorkoutSession?>);

  @override
  _i9.Future<List<_i10.WorkoutSession>> getAllSessions() => (super.noSuchMethod(
        Invocation.method(
          #getAllSessions,
          [],
        ),
        returnValue: _i9.Future<List<_i10.WorkoutSession>>.value(
            <_i10.WorkoutSession>[]),
      ) as _i9.Future<List<_i10.WorkoutSession>>);

  @override
  _i9.Future<List<_i10.WorkoutSession>> getSessionsByDateRange(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSessionsByDateRange,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue: _i9.Future<List<_i10.WorkoutSession>>.value(
            <_i10.WorkoutSession>[]),
      ) as _i9.Future<List<_i10.WorkoutSession>>);

  @override
  _i9.Future<List<_i10.WorkoutSession>> getRecentSessions({int? limit = 10}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecentSessions,
          [],
          {#limit: limit},
        ),
        returnValue: _i9.Future<List<_i10.WorkoutSession>>.value(
            <_i10.WorkoutSession>[]),
      ) as _i9.Future<List<_i10.WorkoutSession>>);

  @override
  _i9.Future<List<_i10.WorkoutSession>> getCompletedSessions() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCompletedSessions,
          [],
        ),
        returnValue: _i9.Future<List<_i10.WorkoutSession>>.value(
            <_i10.WorkoutSession>[]),
      ) as _i9.Future<List<_i10.WorkoutSession>>);

  @override
  _i9.Future<List<_i10.WorkoutSession>> getActiveSessions() =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveSessions,
          [],
        ),
        returnValue: _i9.Future<List<_i10.WorkoutSession>>.value(
            <_i10.WorkoutSession>[]),
      ) as _i9.Future<List<_i10.WorkoutSession>>);

  @override
  _i9.Future<void> deleteSession(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteSession,
          [id],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<int> getSessionCount() => (super.noSuchMethod(
        Invocation.method(
          #getSessionCount,
          [],
        ),
        returnValue: _i9.Future<int>.value(0),
      ) as _i9.Future<int>);

  @override
  _i9.Future<Duration> getTotalWorkoutTime() => (super.noSuchMethod(
        Invocation.method(
          #getTotalWorkoutTime,
          [],
        ),
        returnValue: _i9.Future<Duration>.value(_FakeDuration_2(
          this,
          Invocation.method(
            #getTotalWorkoutTime,
            [],
          ),
        )),
      ) as _i9.Future<Duration>);

  @override
  _i9.Future<double> getTotalWeightLifted() => (super.noSuchMethod(
        Invocation.method(
          #getTotalWeightLifted,
          [],
        ),
        returnValue: _i9.Future<double>.value(0.0),
      ) as _i9.Future<double>);

  @override
  void listenSelf(
    void Function(
      _i3.SessionService?,
      _i3.SessionService,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i3.SessionService? previous,
    _i3.SessionService? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [ExerciseNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockExerciseNotifier extends _i1.Mock implements _i11.ExerciseNotifier {
  MockExerciseNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AutoDisposeAsyncNotifierProviderRef<List<_i4.Exercise>> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue:
            _FakeAutoDisposeAsyncNotifierProviderRef_3<List<_i4.Exercise>>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.AutoDisposeAsyncNotifierProviderRef<List<_i4.Exercise>>);

  @override
  _i2.AsyncValue<List<_i4.Exercise>> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAsyncValue_4<List<_i4.Exercise>>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.AsyncValue<List<_i4.Exercise>>);

  @override
  set state(_i2.AsyncValue<List<_i4.Exercise>>? newState) => super.noSuchMethod(
        Invocation.setter(
          #state,
          newState,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<List<_i4.Exercise>> get future => (super.noSuchMethod(
        Invocation.getter(#future),
        returnValue: _i9.Future<List<_i4.Exercise>>.value(<_i4.Exercise>[]),
      ) as _i9.Future<List<_i4.Exercise>>);

  @override
  _i9.Future<List<_i4.Exercise>> build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _i9.Future<List<_i4.Exercise>>.value(<_i4.Exercise>[]),
      ) as _i9.Future<List<_i4.Exercise>>);

  @override
  _i9.Future<_i4.Exercise> addExercise(_i4.Exercise? exercise) =>
      (super.noSuchMethod(
        Invocation.method(
          #addExercise,
          [exercise],
        ),
        returnValue: _i9.Future<_i4.Exercise>.value(_FakeExercise_5(
          this,
          Invocation.method(
            #addExercise,
            [exercise],
          ),
        )),
      ) as _i9.Future<_i4.Exercise>);

  @override
  _i9.Future<void> updateExercise(_i4.Exercise? exercise) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateExercise,
          [exercise],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> deleteExercise(String? exerciseId) => (super.noSuchMethod(
        Invocation.method(
          #deleteExercise,
          [exerciseId],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i4.Exercise?> getExerciseById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getExerciseById,
          [id],
        ),
        returnValue: _i9.Future<_i4.Exercise?>.value(),
      ) as _i9.Future<_i4.Exercise?>);

  @override
  _i9.Future<List<_i4.Exercise>> getExercisesByCategory(
          _i4.ExerciseCategory? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExercisesByCategory,
          [category],
        ),
        returnValue: _i9.Future<List<_i4.Exercise>>.value(<_i4.Exercise>[]),
      ) as _i9.Future<List<_i4.Exercise>>);

  @override
  _i9.Future<List<_i4.Exercise>> searchExercises(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchExercises,
          [query],
        ),
        returnValue: _i9.Future<List<_i4.Exercise>>.value(<_i4.Exercise>[]),
      ) as _i9.Future<List<_i4.Exercise>>);

  @override
  void listenSelf(
    void Function(
      _i2.AsyncValue<List<_i4.Exercise>>?,
      _i2.AsyncValue<List<_i4.Exercise>>,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<List<_i4.Exercise>> update(
    _i9.FutureOr<List<_i4.Exercise>> Function(List<_i4.Exercise>)? cb, {
    _i9.FutureOr<List<_i4.Exercise>> Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [cb],
          {#onError: onError},
        ),
        returnValue: _i9.Future<List<_i4.Exercise>>.value(<_i4.Exercise>[]),
      ) as _i9.Future<List<_i4.Exercise>>);

  @override
  bool updateShouldNotify(
    _i2.AsyncValue<List<_i4.Exercise>>? previous,
    _i2.AsyncValue<List<_i4.Exercise>>? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [RoutineNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockRoutineNotifier extends _i1.Mock implements _i12.RoutineNotifier {
  MockRoutineNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AutoDisposeAsyncNotifierProviderRef<List<_i13.Routine>> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue:
            _FakeAutoDisposeAsyncNotifierProviderRef_3<List<_i13.Routine>>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.AutoDisposeAsyncNotifierProviderRef<List<_i13.Routine>>);

  @override
  _i2.AsyncValue<List<_i13.Routine>> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAsyncValue_4<List<_i13.Routine>>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.AsyncValue<List<_i13.Routine>>);

  @override
  set state(_i2.AsyncValue<List<_i13.Routine>>? newState) => super.noSuchMethod(
        Invocation.setter(
          #state,
          newState,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<List<_i13.Routine>> get future => (super.noSuchMethod(
        Invocation.getter(#future),
        returnValue: _i9.Future<List<_i13.Routine>>.value(<_i13.Routine>[]),
      ) as _i9.Future<List<_i13.Routine>>);

  @override
  _i9.Future<List<_i13.Routine>> build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _i9.Future<List<_i13.Routine>>.value(<_i13.Routine>[]),
      ) as _i9.Future<List<_i13.Routine>>);

  @override
  _i9.Future<void> addRoutine(_i13.Routine? routine) => (super.noSuchMethod(
        Invocation.method(
          #addRoutine,
          [routine],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> updateRoutine(_i13.Routine? routine) => (super.noSuchMethod(
        Invocation.method(
          #updateRoutine,
          [routine],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> deleteRoutine(String? routineId) => (super.noSuchMethod(
        Invocation.method(
          #deleteRoutine,
          [routineId],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i13.Routine?> getRoutineById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getRoutineById,
          [id],
        ),
        returnValue: _i9.Future<_i13.Routine?>.value(),
      ) as _i9.Future<_i13.Routine?>);

  @override
  _i9.Future<_i13.Routine?> getRoutineForToday() => (super.noSuchMethod(
        Invocation.method(
          #getRoutineForToday,
          [],
        ),
        returnValue: _i9.Future<_i13.Routine?>.value(),
      ) as _i9.Future<_i13.Routine?>);

  @override
  _i9.Future<List<_i13.Routine>> getRoutinesForDay(_i14.WeekDay? day) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRoutinesForDay,
          [day],
        ),
        returnValue: _i9.Future<List<_i13.Routine>>.value(<_i13.Routine>[]),
      ) as _i9.Future<List<_i13.Routine>>);

  @override
  _i9.Future<void> toggleSectionCollapsed(String? sectionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleSectionCollapsed,
          [sectionId],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> reorderRoutines(List<String>? routineIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #reorderRoutines,
          [routineIds],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> moveRoutineToPosition(
    String? routineId,
    int? newPosition,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #moveRoutineToPosition,
          [
            routineId,
            newPosition,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> addSectionsToRoutine(
    String? routineId,
    List<String>? sectionTemplateIds,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSectionsToRoutine,
          [
            routineId,
            sectionTemplateIds,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void listenSelf(
    void Function(
      _i2.AsyncValue<List<_i13.Routine>>?,
      _i2.AsyncValue<List<_i13.Routine>>,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<List<_i13.Routine>> update(
    _i9.FutureOr<List<_i13.Routine>> Function(List<_i13.Routine>)? cb, {
    _i9.FutureOr<List<_i13.Routine>> Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [cb],
          {#onError: onError},
        ),
        returnValue: _i9.Future<List<_i13.Routine>>.value(<_i13.Routine>[]),
      ) as _i9.Future<List<_i13.Routine>>);

  @override
  bool updateShouldNotify(
    _i2.AsyncValue<List<_i13.Routine>>? previous,
    _i2.AsyncValue<List<_i13.Routine>>? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [ProgressionNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockProgressionNotifier extends _i1.Mock
    implements _i15.ProgressionNotifier {
  MockProgressionNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasActiveProgression => (super.noSuchMethod(
        Invocation.getter(#hasActiveProgression),
        returnValue: false,
      ) as bool);

  @override
  _i2.AutoDisposeAsyncNotifierProviderRef<_i8.ProgressionConfig?> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue:
            _FakeAutoDisposeAsyncNotifierProviderRef_3<_i8.ProgressionConfig?>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.AutoDisposeAsyncNotifierProviderRef<_i8.ProgressionConfig?>);

  @override
  _i2.AsyncValue<_i8.ProgressionConfig?> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAsyncValue_4<_i8.ProgressionConfig?>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.AsyncValue<_i8.ProgressionConfig?>);

  @override
  set state(_i2.AsyncValue<_i8.ProgressionConfig?>? newState) =>
      super.noSuchMethod(
        Invocation.setter(
          #state,
          newState,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<_i8.ProgressionConfig?> get future => (super.noSuchMethod(
        Invocation.getter(#future),
        returnValue: _i9.Future<_i8.ProgressionConfig?>.value(),
      ) as _i9.Future<_i8.ProgressionConfig?>);

  @override
  _i9.Future<_i8.ProgressionConfig?> build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _i9.Future<_i8.ProgressionConfig?>.value(),
      ) as _i9.Future<_i8.ProgressionConfig?>);

  @override
  _i9.Future<void> initializeTemplates() => (super.noSuchMethod(
        Invocation.method(
          #initializeTemplates,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> restoreTemplates() => (super.noSuchMethod(
        Invocation.method(
          #restoreTemplates,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> setProgressionConfig(_i8.ProgressionConfig? config) =>
      (super.noSuchMethod(
        Invocation.method(
          #setProgressionConfig,
          [config],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> setProgression({
    required _i16.ProgressionType? type,
    required _i16.ProgressionUnit? unit,
    required _i16.ProgressionTarget? primaryTarget,
    _i16.ProgressionTarget? secondaryTarget,
    required double? incrementValue,
    required int? incrementFrequency,
    required int? cycleLength,
    required int? deloadWeek,
    required double? deloadPercentage,
    Map<String, dynamic>? customParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setProgression,
          [],
          {
            #type: type,
            #unit: unit,
            #primaryTarget: primaryTarget,
            #secondaryTarget: secondaryTarget,
            #incrementValue: incrementValue,
            #incrementFrequency: incrementFrequency,
            #cycleLength: cycleLength,
            #deloadWeek: deloadWeek,
            #deloadPercentage: deloadPercentage,
            #customParameters: customParameters,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> disableProgression() => (super.noSuchMethod(
        Invocation.method(
          #disableProgression,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i5.ProgressionState?> getExerciseProgressionState(
    String? exerciseId,
    String? routineId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExerciseProgressionState,
          [
            exerciseId,
            routineId,
          ],
        ),
        returnValue: _i9.Future<_i5.ProgressionState?>.value(),
      ) as _i9.Future<_i5.ProgressionState?>);

  @override
  _i9.Future<_i5.ProgressionState> initializeExerciseProgression({
    required String? exerciseId,
    required String? routineId,
    required double? baseWeight,
    required int? baseReps,
    required int? baseSets,
    double? oneRepMax,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initializeExerciseProgression,
          [],
          {
            #exerciseId: exerciseId,
            #routineId: routineId,
            #baseWeight: baseWeight,
            #baseReps: baseReps,
            #baseSets: baseSets,
            #oneRepMax: oneRepMax,
          },
        ),
        returnValue:
            _i9.Future<_i5.ProgressionState>.value(_FakeProgressionState_6(
          this,
          Invocation.method(
            #initializeExerciseProgression,
            [],
            {
              #exerciseId: exerciseId,
              #routineId: routineId,
              #baseWeight: baseWeight,
              #baseReps: baseReps,
              #baseSets: baseSets,
              #oneRepMax: oneRepMax,
            },
          ),
        )),
      ) as _i9.Future<_i5.ProgressionState>);

  @override
  _i9.Future<_i7.ProgressionCalculationResult?> calculateExerciseProgression({
    required String? exerciseId,
    required String? routineId,
    required double? currentWeight,
    required int? currentReps,
    required int? currentSets,
    required _i4.Exercise? exercise,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateExerciseProgression,
          [],
          {
            #exerciseId: exerciseId,
            #routineId: routineId,
            #currentWeight: currentWeight,
            #currentReps: currentReps,
            #currentSets: currentSets,
            #exercise: exercise,
          },
        ),
        returnValue: _i9.Future<_i7.ProgressionCalculationResult?>.value(),
      ) as _i9.Future<_i7.ProgressionCalculationResult?>);

  @override
  _i9.Future<void> setSkipNextProgressionForRoutine({
    required String? routineId,
    required List<String>? exerciseIds,
    required bool? skip,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSkipNextProgressionForRoutine,
          [],
          {
            #routineId: routineId,
            #exerciseIds: exerciseIds,
            #skip: skip,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> setSkipNextProgressionForExercises({
    required String? routineId,
    required List<String>? exerciseIds,
    required bool? skip,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSkipNextProgressionForExercises,
          [],
          {
            #routineId: routineId,
            #exerciseIds: exerciseIds,
            #skip: skip,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void listenSelf(
    void Function(
      _i2.AsyncValue<_i8.ProgressionConfig?>?,
      _i2.AsyncValue<_i8.ProgressionConfig?>,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<_i8.ProgressionConfig?> update(
    _i9.FutureOr<_i8.ProgressionConfig?> Function(_i8.ProgressionConfig?)? cb, {
    _i9.FutureOr<_i8.ProgressionConfig?> Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [cb],
          {#onError: onError},
        ),
        returnValue: _i9.Future<_i8.ProgressionConfig?>.value(),
      ) as _i9.Future<_i8.ProgressionConfig?>);

  @override
  bool updateShouldNotify(
    _i2.AsyncValue<_i8.ProgressionConfig?>? previous,
    _i2.AsyncValue<_i8.ProgressionConfig?>? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [ProgressionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProgressionService extends _i1.Mock
    implements _i6.ProgressionService {
  MockProgressionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AutoDisposeNotifierProviderRef<_i6.ProgressionService> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue:
            _FakeAutoDisposeNotifierProviderRef_0<_i6.ProgressionService>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.AutoDisposeNotifierProviderRef<_i6.ProgressionService>);

  @override
  _i6.ProgressionService get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeProgressionService_7(
          this,
          Invocation.getter(#state),
        ),
      ) as _i6.ProgressionService);

  @override
  set state(_i6.ProgressionService? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.ProgressionService build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _FakeProgressionService_7(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
      ) as _i6.ProgressionService);

  @override
  _i9.Future<void> saveProgressionConfig(_i8.ProgressionConfig? config) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveProgressionConfig,
          [config],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i8.ProgressionConfig?> getProgressionConfig(String? configId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProgressionConfig,
          [configId],
        ),
        returnValue: _i9.Future<_i8.ProgressionConfig?>.value(),
      ) as _i9.Future<_i8.ProgressionConfig?>);

  @override
  _i9.Future<_i8.ProgressionConfig?> getActiveProgressionConfig() =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveProgressionConfig,
          [],
        ),
        returnValue: _i9.Future<_i8.ProgressionConfig?>.value(),
      ) as _i9.Future<_i8.ProgressionConfig?>);

  @override
  _i9.Future<List<_i8.ProgressionConfig>> getAllProgressionConfigs() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllProgressionConfigs,
          [],
        ),
        returnValue: _i9.Future<List<_i8.ProgressionConfig>>.value(
            <_i8.ProgressionConfig>[]),
      ) as _i9.Future<List<_i8.ProgressionConfig>>);

  @override
  _i9.Future<void> deleteProgressionConfig(String? configId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProgressionConfig,
          [configId],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> cleanupInactiveProgressionStates() => (super.noSuchMethod(
        Invocation.method(
          #cleanupInactiveProgressionStates,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> saveProgressionState(_i5.ProgressionState? state) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveProgressionState,
          [state],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i5.ProgressionState?> getProgressionState(String? stateId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProgressionState,
          [stateId],
        ),
        returnValue: _i9.Future<_i5.ProgressionState?>.value(),
      ) as _i9.Future<_i5.ProgressionState?>);

  @override
  _i9.Future<_i5.ProgressionState?> getProgressionStateByExercise(
    String? configId,
    String? exerciseId,
    String? routineId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProgressionStateByExercise,
          [
            configId,
            exerciseId,
            routineId,
          ],
        ),
        returnValue: _i9.Future<_i5.ProgressionState?>.value(),
      ) as _i9.Future<_i5.ProgressionState?>);

  @override
  _i9.Future<List<_i5.ProgressionState>> getProgressionStatesByConfig(
          String? configId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProgressionStatesByConfig,
          [configId],
        ),
        returnValue: _i9.Future<List<_i5.ProgressionState>>.value(
            <_i5.ProgressionState>[]),
      ) as _i9.Future<List<_i5.ProgressionState>>);

  @override
  _i9.Future<void> saveProgressionTemplate(
          _i17.ProgressionTemplate? template) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveProgressionTemplate,
          [template],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<List<_i17.ProgressionTemplate>> getAllProgressionTemplates() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllProgressionTemplates,
          [],
        ),
        returnValue: _i9.Future<List<_i17.ProgressionTemplate>>.value(
            <_i17.ProgressionTemplate>[]),
      ) as _i9.Future<List<_i17.ProgressionTemplate>>);

  @override
  _i9.Future<_i17.ProgressionTemplate?> getProgressionTemplate(
          String? templateId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProgressionTemplate,
          [templateId],
        ),
        returnValue: _i9.Future<_i17.ProgressionTemplate?>.value(),
      ) as _i9.Future<_i17.ProgressionTemplate?>);

  @override
  _i9.Future<_i7.ProgressionCalculationResult> calculateProgression(
    String? configId,
    String? exerciseId,
    String? routineId,
    double? currentWeight,
    int? currentReps,
    int? currentSets, {
    required _i4.Exercise? exercise,
    bool? isExerciseLocked = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateProgression,
          [
            configId,
            exerciseId,
            routineId,
            currentWeight,
            currentReps,
            currentSets,
          ],
          {
            #exercise: exercise,
            #isExerciseLocked: isExerciseLocked,
          },
        ),
        returnValue: _i9.Future<_i7.ProgressionCalculationResult>.value(
            _FakeProgressionCalculationResult_8(
          this,
          Invocation.method(
            #calculateProgression,
            [
              configId,
              exerciseId,
              routineId,
              currentWeight,
              currentReps,
              currentSets,
            ],
            {
              #exercise: exercise,
              #isExerciseLocked: isExerciseLocked,
            },
          ),
        )),
      ) as _i9.Future<_i7.ProgressionCalculationResult>);

  @override
  _i9.Future<_i8.ProgressionConfig> initializeProgression({
    required _i16.ProgressionType? type,
    required _i16.ProgressionUnit? unit,
    required _i16.ProgressionTarget? primaryTarget,
    _i16.ProgressionTarget? secondaryTarget,
    required double? incrementValue,
    required int? incrementFrequency,
    required int? cycleLength,
    required int? deloadWeek,
    required double? deloadPercentage,
    Map<String, dynamic>? customParameters,
    bool? isGlobal = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initializeProgression,
          [],
          {
            #type: type,
            #unit: unit,
            #primaryTarget: primaryTarget,
            #secondaryTarget: secondaryTarget,
            #incrementValue: incrementValue,
            #incrementFrequency: incrementFrequency,
            #cycleLength: cycleLength,
            #deloadWeek: deloadWeek,
            #deloadPercentage: deloadPercentage,
            #customParameters: customParameters,
            #isGlobal: isGlobal,
          },
        ),
        returnValue:
            _i9.Future<_i8.ProgressionConfig>.value(_FakeProgressionConfig_9(
          this,
          Invocation.method(
            #initializeProgression,
            [],
            {
              #type: type,
              #unit: unit,
              #primaryTarget: primaryTarget,
              #secondaryTarget: secondaryTarget,
              #incrementValue: incrementValue,
              #incrementFrequency: incrementFrequency,
              #cycleLength: cycleLength,
              #deloadWeek: deloadWeek,
              #deloadPercentage: deloadPercentage,
              #customParameters: customParameters,
              #isGlobal: isGlobal,
            },
          ),
        )),
      ) as _i9.Future<_i8.ProgressionConfig>);

  @override
  _i9.Future<_i5.ProgressionState> initializeExerciseProgression({
    required String? configId,
    required String? exerciseId,
    required String? routineId,
    required double? baseWeight,
    required int? baseReps,
    required int? baseSets,
    double? oneRepMax,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initializeExerciseProgression,
          [],
          {
            #configId: configId,
            #exerciseId: exerciseId,
            #routineId: routineId,
            #baseWeight: baseWeight,
            #baseReps: baseReps,
            #baseSets: baseSets,
            #oneRepMax: oneRepMax,
          },
        ),
        returnValue:
            _i9.Future<_i5.ProgressionState>.value(_FakeProgressionState_6(
          this,
          Invocation.method(
            #initializeExerciseProgression,
            [],
            {
              #configId: configId,
              #exerciseId: exerciseId,
              #routineId: routineId,
              #baseWeight: baseWeight,
              #baseReps: baseReps,
              #baseSets: baseSets,
              #oneRepMax: oneRepMax,
            },
          ),
        )),
      ) as _i9.Future<_i5.ProgressionState>);

  @override
  void listenSelf(
    void Function(
      _i6.ProgressionService?,
      _i6.ProgressionService,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i6.ProgressionService? previous,
    _i6.ProgressionService? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [PerformedSetsNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockPerformedSetsNotifier extends _i1.Mock
    implements _i18.PerformedSetsNotifier {
  MockPerformedSetsNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i19.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i9.Stream<Map<String, int>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<Map<String, int>>.empty(),
      ) as _i9.Stream<Map<String, int>>);

  @override
  Map<String, int> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: <String, int>{},
      ) as Map<String, int>);

  @override
  set state(Map<String, int>? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, int> get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: <String, int>{},
      ) as Map<String, int>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  int getCount(String? routineExerciseId) => (super.noSuchMethod(
        Invocation.method(
          #getCount,
          [routineExerciseId],
        ),
        returnValue: 0,
      ) as int);

  @override
  void setCount(
    String? routineExerciseId,
    int? count,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setCount,
          [
            routineExerciseId,
            count,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void increment(
    String? routineExerciseId,
    int? maxSets,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #increment,
          [
            routineExerciseId,
            maxSets,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void decrement(
    String? routineExerciseId,
    int? maxSets,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #decrement,
          [
            routineExerciseId,
            maxSets,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearAll() => super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    Map<String, int>? old,
    Map<String, int>? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i19.RemoveListener addListener(
    _i20.Listener<Map<String, int>>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i19.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
