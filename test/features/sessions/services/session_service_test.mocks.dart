// Mocks generated by Mockito 5.4.5 from annotations
// in liftly/test/features/sessions/services/session_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:hive_flutter/hive_flutter.dart' as _i2;
import 'package:liftly/core/database/database_service.dart' as _i5;
import 'package:liftly/features/progression/models/progression_config.dart' as _i6;
import 'package:liftly/features/progression/models/progression_state.dart' as _i7;
import 'package:liftly/features/progression/models/progression_template.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBox_0<E> extends _i1.SmartFake implements _i2.Box<E> {
  _FakeBox_0(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i1.Mock implements _i2.Box<E> {
  MockBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<E> get values => (super.noSuchMethod(Invocation.getter(#values), returnValue: <E>[]) as Iterable<E>);

  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: _i3.dummyValue<String>(this, Invocation.getter(#name)))
          as String);

  @override
  bool get isOpen => (super.noSuchMethod(Invocation.getter(#isOpen), returnValue: false) as bool);

  @override
  bool get lazy => (super.noSuchMethod(Invocation.getter(#lazy), returnValue: false) as bool);

  @override
  Iterable<dynamic> get keys =>
      (super.noSuchMethod(Invocation.getter(#keys), returnValue: <dynamic>[]) as Iterable<dynamic>);

  @override
  int get length => (super.noSuchMethod(Invocation.getter(#length), returnValue: 0) as int);

  @override
  bool get isEmpty => (super.noSuchMethod(Invocation.getter(#isEmpty), returnValue: false) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(Invocation.getter(#isNotEmpty), returnValue: false) as bool);

  @override
  Iterable<E> valuesBetween({dynamic startKey, dynamic endKey}) =>
      (super.noSuchMethod(
            Invocation.method(#valuesBetween, [], {#startKey: startKey, #endKey: endKey}),
            returnValue: <E>[],
          )
          as Iterable<E>);

  @override
  E? getAt(int? index) => (super.noSuchMethod(Invocation.method(#getAt, [index])) as E?);

  @override
  Map<dynamic, E> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []), returnValue: <dynamic, E>{}) as Map<dynamic, E>);

  @override
  dynamic keyAt(int? index) => super.noSuchMethod(Invocation.method(#keyAt, [index]));

  @override
  _i4.Stream<_i2.BoxEvent> watch({dynamic key}) =>
      (super.noSuchMethod(Invocation.method(#watch, [], {#key: key}), returnValue: _i4.Stream<_i2.BoxEvent>.empty())
          as _i4.Stream<_i2.BoxEvent>);

  @override
  bool containsKey(dynamic key) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [key]), returnValue: false) as bool);

  @override
  _i4.Future<void> put(dynamic key, E? value) =>
      (super.noSuchMethod(
            Invocation.method(#put, [key, value]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> putAt(int? index, E? value) =>
      (super.noSuchMethod(
            Invocation.method(#putAt, [index, value]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> putAll(Map<dynamic, E>? entries) =>
      (super.noSuchMethod(
            Invocation.method(#putAll, [entries]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<int> add(E? value) =>
      (super.noSuchMethod(Invocation.method(#add, [value]), returnValue: _i4.Future<int>.value(0)) as _i4.Future<int>);

  @override
  _i4.Future<Iterable<int>> addAll(Iterable<E>? values) =>
      (super.noSuchMethod(Invocation.method(#addAll, [values]), returnValue: _i4.Future<Iterable<int>>.value(<int>[]))
          as _i4.Future<Iterable<int>>);

  @override
  _i4.Future<void> delete(dynamic key) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [key]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAt(int? index) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAt, [index]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAll(Iterable<dynamic>? keys) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAll, [keys]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> compact() =>
      (super.noSuchMethod(
            Invocation.method(#compact, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<int> clear() =>
      (super.noSuchMethod(Invocation.method(#clear, []), returnValue: _i4.Future<int>.value(0)) as _i4.Future<int>);

  @override
  _i4.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteFromDisk() =>
      (super.noSuchMethod(
            Invocation.method(#deleteFromDisk, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> flush() =>
      (super.noSuchMethod(
            Invocation.method(#flush, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i5.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized => (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false) as bool);

  @override
  _i2.Box<dynamic> get exercisesBox =>
      (super.noSuchMethod(
            Invocation.getter(#exercisesBox),
            returnValue: _FakeBox_0<dynamic>(this, Invocation.getter(#exercisesBox)),
          )
          as _i2.Box<dynamic>);

  @override
  _i2.Box<dynamic> get routinesBox =>
      (super.noSuchMethod(
            Invocation.getter(#routinesBox),
            returnValue: _FakeBox_0<dynamic>(this, Invocation.getter(#routinesBox)),
          )
          as _i2.Box<dynamic>);

  @override
  _i2.Box<dynamic> get sessionsBox =>
      (super.noSuchMethod(
            Invocation.getter(#sessionsBox),
            returnValue: _FakeBox_0<dynamic>(this, Invocation.getter(#sessionsBox)),
          )
          as _i2.Box<dynamic>);

  @override
  _i2.Box<dynamic> get progressBox =>
      (super.noSuchMethod(
            Invocation.getter(#progressBox),
            returnValue: _FakeBox_0<dynamic>(this, Invocation.getter(#progressBox)),
          )
          as _i2.Box<dynamic>);

  @override
  _i2.Box<dynamic> get settingsBox =>
      (super.noSuchMethod(
            Invocation.getter(#settingsBox),
            returnValue: _FakeBox_0<dynamic>(this, Invocation.getter(#settingsBox)),
          )
          as _i2.Box<dynamic>);

  @override
  _i2.Box<dynamic> get routineSectionTemplatesBox =>
      (super.noSuchMethod(
            Invocation.getter(#routineSectionTemplatesBox),
            returnValue: _FakeBox_0<dynamic>(this, Invocation.getter(#routineSectionTemplatesBox)),
          )
          as _i2.Box<dynamic>);

  @override
  _i2.Box<_i6.ProgressionConfig> get progressionConfigsBox =>
      (super.noSuchMethod(
            Invocation.getter(#progressionConfigsBox),
            returnValue: _FakeBox_0<_i6.ProgressionConfig>(this, Invocation.getter(#progressionConfigsBox)),
          )
          as _i2.Box<_i6.ProgressionConfig>);

  @override
  _i2.Box<_i7.ProgressionState> get progressionStatesBox =>
      (super.noSuchMethod(
            Invocation.getter(#progressionStatesBox),
            returnValue: _FakeBox_0<_i7.ProgressionState>(this, Invocation.getter(#progressionStatesBox)),
          )
          as _i2.Box<_i7.ProgressionState>);

  @override
  _i2.Box<_i8.ProgressionTemplate> get progressionTemplatesBox =>
      (super.noSuchMethod(
            Invocation.getter(#progressionTemplatesBox),
            returnValue: _FakeBox_0<_i8.ProgressionTemplate>(this, Invocation.getter(#progressionTemplatesBox)),
          )
          as _i2.Box<_i8.ProgressionTemplate>);

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> clearAllData() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllData, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> forceResetDatabase() =>
      (super.noSuchMethod(
            Invocation.method(#forceResetDatabase, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
