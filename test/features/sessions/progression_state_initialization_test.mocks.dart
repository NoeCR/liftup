// Mocks generated by Mockito 5.4.5 from annotations
// in liftly/test/features/sessions/progression_state_initialization_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:liftly/common/enums/progression_type_enum.dart' as _i9;
import 'package:liftly/features/exercise/models/exercise.dart' as _i3;
import 'package:liftly/features/exercise/notifiers/exercise_notifier.dart' as _i5;
import 'package:liftly/features/progression/models/progression_calculation_result.dart' as _i10;
import 'package:liftly/features/progression/models/progression_config.dart' as _i8;
import 'package:liftly/features/progression/models/progression_state.dart' as _i4;
import 'package:liftly/features/progression/notifiers/progression_notifier.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:riverpod_annotation/riverpod_annotation.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAutoDisposeAsyncNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.AutoDisposeAsyncNotifierProviderRef<T> {
  _FakeAutoDisposeAsyncNotifierProviderRef_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAsyncValue_1<T> extends _i1.SmartFake implements _i2.AsyncValue<T> {
  _FakeAsyncValue_1(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeExercise_2 extends _i1.SmartFake implements _i3.Exercise {
  _FakeExercise_2(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

class _FakeProgressionState_3 extends _i1.SmartFake implements _i4.ProgressionState {
  _FakeProgressionState_3(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

/// A class which mocks [ExerciseNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockExerciseNotifier extends _i1.Mock implements _i5.ExerciseNotifier {
  MockExerciseNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AutoDisposeAsyncNotifierProviderRef<List<_i3.Exercise>> get ref =>
      (super.noSuchMethod(
            Invocation.getter(#ref),
            returnValue: _FakeAutoDisposeAsyncNotifierProviderRef_0<List<_i3.Exercise>>(this, Invocation.getter(#ref)),
          )
          as _i2.AutoDisposeAsyncNotifierProviderRef<List<_i3.Exercise>>);

  @override
  _i2.AsyncValue<List<_i3.Exercise>> get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeAsyncValue_1<List<_i3.Exercise>>(this, Invocation.getter(#state)),
          )
          as _i2.AsyncValue<List<_i3.Exercise>>);

  @override
  set state(_i2.AsyncValue<List<_i3.Exercise>>? newState) =>
      super.noSuchMethod(Invocation.setter(#state, newState), returnValueForMissingStub: null);

  @override
  _i6.Future<List<_i3.Exercise>> get future =>
      (super.noSuchMethod(
            Invocation.getter(#future),
            returnValue: _i6.Future<List<_i3.Exercise>>.value(<_i3.Exercise>[]),
          )
          as _i6.Future<List<_i3.Exercise>>);

  @override
  _i6.Future<List<_i3.Exercise>> build() =>
      (super.noSuchMethod(
            Invocation.method(#build, []),
            returnValue: _i6.Future<List<_i3.Exercise>>.value(<_i3.Exercise>[]),
          )
          as _i6.Future<List<_i3.Exercise>>);

  @override
  _i6.Future<_i3.Exercise> addExercise(_i3.Exercise? exercise) =>
      (super.noSuchMethod(
            Invocation.method(#addExercise, [exercise]),
            returnValue: _i6.Future<_i3.Exercise>.value(
              _FakeExercise_2(this, Invocation.method(#addExercise, [exercise])),
            ),
          )
          as _i6.Future<_i3.Exercise>);

  @override
  _i6.Future<void> updateExercise(_i3.Exercise? exercise) =>
      (super.noSuchMethod(
            Invocation.method(#updateExercise, [exercise]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> deleteExercise(String? exerciseId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteExercise, [exerciseId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i3.Exercise?> getExerciseById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getExerciseById, [id]), returnValue: _i6.Future<_i3.Exercise?>.value())
          as _i6.Future<_i3.Exercise?>);

  @override
  _i6.Future<List<_i3.Exercise>> getExercisesByCategory(_i3.ExerciseCategory? category) =>
      (super.noSuchMethod(
            Invocation.method(#getExercisesByCategory, [category]),
            returnValue: _i6.Future<List<_i3.Exercise>>.value(<_i3.Exercise>[]),
          )
          as _i6.Future<List<_i3.Exercise>>);

  @override
  _i6.Future<List<_i3.Exercise>> searchExercises(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchExercises, [query]),
            returnValue: _i6.Future<List<_i3.Exercise>>.value(<_i3.Exercise>[]),
          )
          as _i6.Future<List<_i3.Exercise>>);

  @override
  void listenSelf(
    void Function(_i2.AsyncValue<List<_i3.Exercise>>?, _i2.AsyncValue<List<_i3.Exercise>>)? listener, {
    void Function(Object, StackTrace)? onError,
  }) => super.noSuchMethod(
    Invocation.method(#listenSelf, [listener], {#onError: onError}),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<List<_i3.Exercise>> update(
    _i6.FutureOr<List<_i3.Exercise>> Function(List<_i3.Exercise>)? cb, {
    _i6.FutureOr<List<_i3.Exercise>> Function(Object, StackTrace)? onError,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#update, [cb], {#onError: onError}),
            returnValue: _i6.Future<List<_i3.Exercise>>.value(<_i3.Exercise>[]),
          )
          as _i6.Future<List<_i3.Exercise>>);

  @override
  bool updateShouldNotify(_i2.AsyncValue<List<_i3.Exercise>>? previous, _i2.AsyncValue<List<_i3.Exercise>>? next) =>
      (super.noSuchMethod(Invocation.method(#updateShouldNotify, [previous, next]), returnValue: false) as bool);
}

/// A class which mocks [ProgressionNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockProgressionNotifier extends _i1.Mock implements _i7.ProgressionNotifier {
  MockProgressionNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasActiveProgression =>
      (super.noSuchMethod(Invocation.getter(#hasActiveProgression), returnValue: false) as bool);

  @override
  _i2.AutoDisposeAsyncNotifierProviderRef<_i8.ProgressionConfig?> get ref =>
      (super.noSuchMethod(
            Invocation.getter(#ref),
            returnValue: _FakeAutoDisposeAsyncNotifierProviderRef_0<_i8.ProgressionConfig?>(
              this,
              Invocation.getter(#ref),
            ),
          )
          as _i2.AutoDisposeAsyncNotifierProviderRef<_i8.ProgressionConfig?>);

  @override
  _i2.AsyncValue<_i8.ProgressionConfig?> get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeAsyncValue_1<_i8.ProgressionConfig?>(this, Invocation.getter(#state)),
          )
          as _i2.AsyncValue<_i8.ProgressionConfig?>);

  @override
  set state(_i2.AsyncValue<_i8.ProgressionConfig?>? newState) =>
      super.noSuchMethod(Invocation.setter(#state, newState), returnValueForMissingStub: null);

  @override
  _i6.Future<_i8.ProgressionConfig?> get future =>
      (super.noSuchMethod(Invocation.getter(#future), returnValue: _i6.Future<_i8.ProgressionConfig?>.value())
          as _i6.Future<_i8.ProgressionConfig?>);

  @override
  _i6.Future<_i8.ProgressionConfig?> build() =>
      (super.noSuchMethod(Invocation.method(#build, []), returnValue: _i6.Future<_i8.ProgressionConfig?>.value())
          as _i6.Future<_i8.ProgressionConfig?>);

  @override
  _i6.Future<void> initializeTemplates() =>
      (super.noSuchMethod(
            Invocation.method(#initializeTemplates, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> restoreTemplates() =>
      (super.noSuchMethod(
            Invocation.method(#restoreTemplates, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> setProgressionConfig(_i8.ProgressionConfig? config) =>
      (super.noSuchMethod(
            Invocation.method(#setProgressionConfig, [config]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> setProgression({
    required _i9.ProgressionType? type,
    required _i9.ProgressionUnit? unit,
    required _i9.ProgressionTarget? primaryTarget,
    _i9.ProgressionTarget? secondaryTarget,
    required double? incrementValue,
    required int? incrementFrequency,
    required int? cycleLength,
    required int? deloadWeek,
    required double? deloadPercentage,
    Map<String, dynamic>? customParameters,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#setProgression, [], {
              #type: type,
              #unit: unit,
              #primaryTarget: primaryTarget,
              #secondaryTarget: secondaryTarget,
              #incrementValue: incrementValue,
              #incrementFrequency: incrementFrequency,
              #cycleLength: cycleLength,
              #deloadWeek: deloadWeek,
              #deloadPercentage: deloadPercentage,
              #customParameters: customParameters,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> disableProgression() =>
      (super.noSuchMethod(
            Invocation.method(#disableProgression, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i4.ProgressionState?> getExerciseProgressionState(String? exerciseId, String? routineId) =>
      (super.noSuchMethod(
            Invocation.method(#getExerciseProgressionState, [exerciseId, routineId]),
            returnValue: _i6.Future<_i4.ProgressionState?>.value(),
          )
          as _i6.Future<_i4.ProgressionState?>);

  @override
  _i6.Future<_i4.ProgressionState> initializeExerciseProgression({
    required String? exerciseId,
    required String? routineId,
    required double? baseWeight,
    required int? baseReps,
    required int? baseSets,
    double? oneRepMax,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#initializeExerciseProgression, [], {
              #exerciseId: exerciseId,
              #routineId: routineId,
              #baseWeight: baseWeight,
              #baseReps: baseReps,
              #baseSets: baseSets,
              #oneRepMax: oneRepMax,
            }),
            returnValue: _i6.Future<_i4.ProgressionState>.value(
              _FakeProgressionState_3(
                this,
                Invocation.method(#initializeExerciseProgression, [], {
                  #exerciseId: exerciseId,
                  #routineId: routineId,
                  #baseWeight: baseWeight,
                  #baseReps: baseReps,
                  #baseSets: baseSets,
                  #oneRepMax: oneRepMax,
                }),
              ),
            ),
          )
          as _i6.Future<_i4.ProgressionState>);

  @override
  _i6.Future<_i10.ProgressionCalculationResult?> calculateExerciseProgression({
    required String? exerciseId,
    required String? routineId,
    required double? currentWeight,
    required int? currentReps,
    required int? currentSets,
    _i3.ExerciseType? exerciseType,
    _i3.Exercise? exercise,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#calculateExerciseProgression, [], {
              #exerciseId: exerciseId,
              #routineId: routineId,
              #currentWeight: currentWeight,
              #currentReps: currentReps,
              #currentSets: currentSets,
              #exerciseType: exerciseType,
              #exercise: exercise,
            }),
            returnValue: _i6.Future<_i10.ProgressionCalculationResult?>.value(),
          )
          as _i6.Future<_i10.ProgressionCalculationResult?>);

  @override
  _i6.Future<void> setSkipNextProgressionForRoutine({
    required String? routineId,
    required List<String>? exerciseIds,
    required bool? skip,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#setSkipNextProgressionForRoutine, [], {
              #routineId: routineId,
              #exerciseIds: exerciseIds,
              #skip: skip,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> setSkipNextProgressionForExercises({
    required String? routineId,
    required List<String>? exerciseIds,
    required bool? skip,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#setSkipNextProgressionForExercises, [], {
              #routineId: routineId,
              #exerciseIds: exerciseIds,
              #skip: skip,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void listenSelf(
    void Function(_i2.AsyncValue<_i8.ProgressionConfig?>?, _i2.AsyncValue<_i8.ProgressionConfig?>)? listener, {
    void Function(Object, StackTrace)? onError,
  }) => super.noSuchMethod(
    Invocation.method(#listenSelf, [listener], {#onError: onError}),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<_i8.ProgressionConfig?> update(
    _i6.FutureOr<_i8.ProgressionConfig?> Function(_i8.ProgressionConfig?)? cb, {
    _i6.FutureOr<_i8.ProgressionConfig?> Function(Object, StackTrace)? onError,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#update, [cb], {#onError: onError}),
            returnValue: _i6.Future<_i8.ProgressionConfig?>.value(),
          )
          as _i6.Future<_i8.ProgressionConfig?>);

  @override
  bool updateShouldNotify(
    _i2.AsyncValue<_i8.ProgressionConfig?>? previous,
    _i2.AsyncValue<_i8.ProgressionConfig?>? next,
  ) => (super.noSuchMethod(Invocation.method(#updateShouldNotify, [previous, next]), returnValue: false) as bool);
}
